pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "piyushh69/weather-app"
        DOCKER_TAG = "latest"
        TEST_RESULTS_DIR = "Weather-app/test-results"
    }

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    checkout([$class: 'GitSCM',
                        branches: [[name: '*/main']],
                        userRemoteConfigs: [[
                            url: 'https://github.com/Piyushshrii/javascript-projects.git'
                        ]]
                    ])
                }
            }
        }

        stage('Login to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'jenkins-server-id', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh '''
                            echo "Logging into Docker Hub..."
                            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin || { echo "Docker login failed!"; exit 1; }
                        '''
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh '''
                        echo "Building Docker image..."
                        docker build -t $DOCKER_IMAGE:$DOCKER_TAG -f Weather-app/Dockerfile Weather-app/ || { echo "Docker build failed!"; exit 1; }
                    '''
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    sh '''
                        cd Weather-app
                        if [ -f package.json ]; then
                            echo "Installing dependencies..."
                            npm install --silent || { echo "Dependency installation failed!"; exit 1; }
                        else
                            echo "ERROR: package.json not found!"
                            exit 1
                        fi
                    '''
                }
            }
        }

        stage('Run Unit Tests') {
            steps {
                script {
                    sh '''
                        cd Weather-app
                        if [ -f package.json ]; then
                            echo "Running tests..."
                            npm test || true
                        else
                            echo "Skipping tests: package.json not found!"
                        fi
                    '''
                }
            }
            post {
                always {
                    script {
                        echo "Publishing test results..."
                        junit 'Weather-app/test-results/results.xml'
                    }
                }
            }
        }

        stage('Publish to Docker Hub') {
            steps {
                script {
                    sh '''
                        echo "Pushing Docker image..."
                        docker push $DOCKER_IMAGE:$DOCKER_TAG || { echo "Docker push failed!"; exit 1; }
                    '''
                }
            }
        }

        stage('Deploy Container') {
            steps {
                script {
                    sh '''
                        echo "Stopping old container (if exists)..."
                        docker rm -f weather-app-container || true

                        echo "Deploying new container..."
                        docker run -d -p 80:80 --name weather-app-container $DOCKER_IMAGE:$DOCKER_TAG || { echo "Docker run failed!"; exit 1; }
                    '''
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
